<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--properties标签：用来引入外部配置文件，类似于Spring中的property-placeholder，其属性
            resource:从类路径引入
            url:从磁盘路径或者网络路径引入
    -->
    <properties resource="db.properties"></properties>
    <!--settings标签：用来控制mybatis运行时的行为，是mybatis中的重要配置-->
    <settings>
        <!--设置列名映射的时候是否是驼峰标识,如：CREATED_BY_ID_值映射入createdById中，也可用resultMap实现该功能-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
    <!--typeAliases标签：用来给引用的实体类起别名，默认情况下需要写类的完全限定名。
            如果在此处做了配置，那么映射文件中引用时可以直接写类的名称，在type中配置类的完全限定名，
            在使用的时候可以忽略大小写，alias属性来设置类的别名。
    -->
    <typeAliases>
        <typeAlias type="com.liusiqi.mode.Classes" alias="classes"></typeAlias>
        <!--如果需要引用多个类，那么给每一个类起别名肯定会很麻烦，因此可以指定对应的包名，那么默认用的是类名-->
        <package name="com.liusiqi.model"/>
    </typeAliases>
    <!--
    environments标签：用来配置多个环境的数据库连接信息。
    environment就用来表示不同环境的细节配置，每一个环境中都需要一个事务管理器以及数据源的配置。
    -->
    <!--default:用来选择需要的环境-->
    <environments default="development">
        <!--id:表示不同环境的名称-->
        <environment id="development">
            <transactionManager type="JDBC"/>
            <!--配置数据库连接-->
            <dataSource type="POOLED">
                <!--使用${}来引入外部变量-->
                <property name="driver" value="${driverClassName}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--databaseIdProvider标签：用来配置数据库的产品标识
    在不同的数据库中，可能sql语句的写法是不一样的，为了增强移植性，可以提供不同数据库的操作实现
    在编写不同的sql语句的时候，可以指定databaseId属性来标识当前sql语句可以运行在哪个数据库中
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="SQL Server" value="sqlserver"/>
        <property name="Oracle" value="orcl"/>
    </databaseIdProvider>

    <!--mappers标签：用来配置sql的映射文件
        mapper标签：将具体某个接口实现注册为映射器，其属性
            class:直接引入接口的全类名，可以将xml文件放在dao的同级目录下，并且设置相同的文件名称，同时可以使用注解的方式来进行相关的配置
            url:可以从磁盘或者网络路径查找sql映射文件(很少使用)
            resource:在resource路径下寻找sql映射文件，不需要跟接口类路径保持一致。
        package标签：将包内的所有接口实现全部注册为映射器
            注意：1）如果映射文件与接口类放在一起，且为maven项目时，需在pom.xml中做如下配置：
                （原因是maven在编译的文件的时候只会编译java文件）
                <build>
                    <resources>
                        <resource>
                            <directory>src/main/java</directory>
                        <includes>
                            <include>**/*.xml</include>
                        </includes>
                    </resource>
                    </resources>
                </build>
                2）如果映射文件放在resources中，则映射文件需放在与接口类同样的路径下。（注意多级目录要一个一个创建）
    -->
    <mappers>
<!--        <mapper resource="com/liusiqi/mapper/StudentMapper.xml"/>-->
<!--        <mapper resource="com/liusiqi/mapper/ClassesMapper.xml"/>-->
<!--        <mapper class="com.liusiqi.mapper.ClassesMapper"/>-->
        <package name="com.liusiqi.mapper"/>
    </mappers>
</configuration>